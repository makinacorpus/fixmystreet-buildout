########################################################################################################################
# Project specific settings
########################################################################################################################

[settings]
pil-url=http://dist.plone.org/thirdparty/PIL-1.1.7.tar.gz#egg=PIL-1.1.7

[buildout]
find-links=${settings:find-links}
# extra directories to add to the python path
extra-paths=
# better have mr.developer mananing your eggs, see sources.cfg
develop=src/makina.fixmystreet
extras =
eggs =

[sources]
# see http://pypi.python.org/pypi/mr.developer for documentation
# better to edit ./sources.cfg

[ubuntulibs]
recipe = plone.recipe.command
update-command = ${ubuntulibs:command}
command =
    ln -sfv /usr/lib/x86_64-linux-gnu/libz.so        ${buildout:directory}/.libs/
    ln -sfv /usr/lib/x86_64-linux-gnu/libjpeg.so     ${buildout:directory}/.libs/
    ln -sfv /usr/lib/x86_64-linux-gnu/libfreetype.so ${buildout:directory}/.libs/

[pil]
recipe = minitage.recipe.scripts
eggs=PIL
index=${settings:pil-url}
library-dirs=${buildout:directory}/.libs
find-links=${settings:pil-url}
interpreter=pilpy
scripts=pilpy
PIL-pre-setup-hook=${buildout:directory}/etc/project/pil.py:pil
environment=
    LD_LIBRARY_PATH=${buildout:directory}/.libs:$LD_LIBRARY_PATH


[py2cairo]
recipe = minitage.recipe.cmmi
url = http://cairographics.org/releases/py2cairo-1.10.0.tar.bz2
md5sum = 20337132c4ab06c1146ad384d55372c5
pre-configure-hook=${buildout:directory}/etc/project/pycairo.py:pycairo
configure = ${scripts:executable}
prefix-option=waf configure  --prefix=
configure-options= --destdir=${py2cairo:prefix}
noconfigure=true
prefix = ${buildout:directory}/parts/py2cairo
make-binary=${py2cairo:configure} waf

[scripts]
executable = python
includes=/usr/include/gdal
recipe=minitage.recipe.scripts
extra-paths=${buildout:extra-paths}
    ${py2cairo:prefix}/lib/python2.7/site-packages/
    ${py2cairo:prefix}/lib/python2.6/site-packages/
    ${buildout:sources-dir}
    ${buildout:sources-dir}/google_analytics
    ${buildout:sources-dir}/social_auth
    ${buildout:sources-dir}/stdimage
    ${buildout:sources-dir}/transmeta

eggs=
    jarn.mkrelease
    zest.releaser
    z3c.checkversions
#Django
    PasteDeploy
    Paste
    cryptacular
    dj.paste
    WebOb
    WebError
    repoze.vhm
    CherryPy
    gunicorn
    psycopg2
    egenix-mx-base
#with_egg_transmeta
    django-transmeta
#with_database_postgresql
#with_tool_coverage
    coverage
#with_egg_djangostdimage
    django-stdimage
#with_egg_pyopenssl
    pyOpenSSL
#with_binding_pil
    PIL
#with_gis_gdal
    GDal
#with_gis_geopy
    geopy
#with_egg_djangosocialauth
#with_binding_lxml
    lxml
    elementtree
#with_tool_ipython
    ipython
#with_tool_bpython
    bpython
#with_egg_djangoregistration
#with_tool_nose
    nose
    django-social-auth
    django-registration
	makina.fixmystreet
	django_fixmystreet ${buildout:extras}
    lxml

#custom
# Scripts generated filtering
scripts=
#z3c.checkversions
    checkversions
#zope2
    paster
#with_tool_bpython
    bpython
#with_tool_nose
    nosetests
    nose
#with_tool_ipython
    ipython
#jarn.mkrelease
    mkrelease
    fixmystreet_manage
#zest.releaser
    project_diff
    project_eggs
    project_md5
    project_release
    package_svn_prepare
    release_eggs
# manage django
    django-admin.py
    fixmystreet_manage

entry-points=
# runner


env-file=${buildout:directory}/etc/makina.fixmystreet.env
interpreter = djangopy
dependent-scripts=true
#paster-initialization=

[test]
recipe = zc.recipe.testrunner
eggs = ${scripts:eggs}
script = selftest

[omelette]
order=${scripts:recipe}
recipe = collective.recipe.omelette
eggs = ${scripts:eggs}
packages =${scripts:extra-paths}

# zope.testing testrunner support
[testenv]

# This testrunner is a zc.recipe.testrunner like
# See http://pypi.python.org/pypi/zc.recipe.testrunner/
# It can do xml reports addon if you supply -x as a command line argument
# It is useful for generating reports for hudson or other contineous integration
[makinafixmystreet.test]
recipe = collective.xmltestreport
eggs = ${scripts:eggs}
extra-paths = ${scripts:extra-paths}
defaults = ['--exit-with-status', '--auto-color', '--auto-progress']
environment = testenv

[instance]
recipe = collective.recipe.template[genshi]:genshi
input =  ${buildout:directory}/etc/templates/wsgi/paster.ini.in
output = ${buildout:directory}/etc/wsgi/instance.ini
host=${hosts:instance}
port=${ports:instance}
# set here your project application wsgi application
debugtoolbar.eval_exc=true
intercept_exc_debug=debug
debug=${settings:debug}
dsm=django_fixmystreet.settings

# vim:set ft=cfg:
